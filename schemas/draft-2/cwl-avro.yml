- type: enum
  name: Datatype
  symbols:
    - "null"
    - boolean
    - int
    - long
    - float
    - double
    - bytes
    - string
    - record
    - enum
    - array
    - map
    - File
  doc: |
   CWL data types are based on Avro schema declarations.  Refer to the [Avro
   schema declaration
   documentation](https://avro.apache.org/docs/current/spec.html#schemas) for
   detailed information.  In addition, CWL defines [`File`](#/schema/File)
   as a special record type.

   ## Primitive types

   * **null**: no value
   * **boolean**: a binary value
   * **int**: 32-bit signed integer
   * **long**: 64-bit signed integer
   * **float**: single precision (32-bit) IEEE 754 floating-point number
   * **double**: double precision (64-bit) IEEE 754 floating-point number
   * **bytes**: sequence of 8-bit unsigned bytes
   * **string**: unicode character sequence

   ## Complex types

   * **record**: An object with one or more fields defined by name and type
   * **enum**: A value from a finite set of symbolic values
   * **array**: An ordered sequence of values
   * **map**: An unordered collection of key/value pairs

- type: record
  name: File
  fields: [
            { name: "path", type: "string" },
            { name: "checksum", type: ["null", "string"] },
            { name: "size", type: ["null", "long"] },
            {
                name: "secondaryFiles",
                type: [
                    "null",
                    {
                        type: "array",
                        items: "File"
                    }
                ]
            }
        ]

- type: record
  name: Expression
  doc: "An expression is a fragment of executable code that is evaluated by workflow
  platform in order to affect the behavior of a process."
  fields:
    - name: "class"
      type: "string"
      doc: Currently only `JavascriptExpression`

- type: record
  name: JavascriptExpression
  extends: Expression
  doc: |
    Execute [Javascript/ECMAScript
    5.1](http://www.ecma-international.org/ecma-262/5.1/) code and return a JSON value.

    Before executing the expression, the runtime must initialize a JavaScript
    variable "$job" containing a copy of the validated contents of the input object
    document.  This variable must be available in the expression's global
    namespace when the expression is evaluated.

    The runtime must also include any code defined in [`Process.expressionDefs`](#/schema/Process).

    Expressions must be evaluated in an isolated context (a "sandbox") which
    permits no side effects to leak outside the context, and permit no outside
    data to leak into the context.  Expressions must be evaluated in
    [Javascript strict
    mode](http://www.ecma-international.org/ecma-262/5.1/#sec-4.2.2).

    The order in which expressions are evaluated is undefined.

    Implementations may apply other limits, such as process isolation,
    timeouts, and operating system containers/jails to minimize the security
    risks associated with running untrusted code.

  fields:
    - name: "value"
      type: ["null", "string"]
      doc: |
        A fragment of JavaScript code.  If `value` is enclosed in braces ("{"
        and "}") then it will be interpreted as a [function
        body](http://www.ecma-international.org/ecma-262/5.1/#sec-13) for an
        anonymous, zero-argument function, and the value of the expression will
        be the value returned when this function is executed.  Otherwise, the
        code in `value` will be interpreted as a [Javascript
        expression](http://www.ecma-international.org/ecma-262/5.1/#sec-11),
        and the value of the expression will be the result of evaluating that
        expression.

    - name: "invoke"
      type:
        - "null"
        - type: array
          items: string
          doc: "Construct a Javascript function invocation.  The first element of
          the array is the function name, subsequent elements are invocation parameter."

- type: record
  name: "Ref"
  fields: [
    { name: "ref", type: "string" }
  ]
  doc: >
    A URI reference to another object.  This may refer to an object within the
    current document, to an external file, or to a labeled object within an
    external file.  To reference an object within the current document or
    an external document, the object must be labeled with an `id` field.

- type: record
  name: "CommandLineBinding"
  fields: [
    { name: "position", type: ["null", "int"] },
    { name: "prefix", type: [ "null", "string"] },
    { name: "separator", type: ["null", "string"] },
    { name: "itemSeparator", type: ["null", "string"] },
    { name: "valueFrom", type: ["null", "Expression", "Ref"] },
    { name: "loadContents", type: ["null", "boolean"] }
  ]

- type: record
  name: "OutputBinding"
  fields: [
    { name: "valueFrom", type: ["null", "Expression", "Ref"] },
    { name: "glob", type: ["null", "string"] },
    { name: "loadContents", type: ["null", "boolean"] }
    ]

- type: record
  name: "DataLink"
  fields: [
    { name: "source", type: "string" }
  ]

- type: record
  name: ExternallyDefinedInput
  fields: [
    { name: "def", type: "string" },
    {
      name: "connect",
      type: [
        "DataLink",
        {
          type: "array",
          items: "DataLink"
        }
      ]
    },
    { name: "id", type: ["null", "string"] }
  ]

- type: record
  name: ExternallyDefinedOutput
  fields: [
    { name: "def", type: "string" },
    { name: "id", type: "string" }
  ]

- type: record
  name: "Schema"
  doc: "A schema defines a parameter type."
  fields: [
    {
      name: type,
      doc: "The data type of this parameter.",
      type: [
        "Datatype",
        "Schema",
        "string",
        {
          type: "array",
          items: [ "Datatype", "Schema", "string" ]
        }
      ]
    },
    {
      name: fields,
      type: [
        "null",
        {
          type: "array",
          items: "Schema"
        }
      ],
      doc: "If `type` is `record`, defines the fields of the record."
    },
    {
      name: "symbols",
      type: [
        "null",
        {
          type: "array",
          items: "string"
        }
      ],
      doc: If `type` is `enum`, defines the set of valid symbols.
    },
    {
      name: items,
      type: [
        "null",
        "Datatype",
        "Schema",
        "string",
        {
          type: "array",
          items: [ "Datatype", "Schema", "string" ]
        }
      ],
      doc: If `type` is `array`, defines the type of the array elements.
    },
    {
      name: "values",
      type: [
        "null",
        "Datatype",
        "Schema",
        "string",
        {
          type: "array",
          items: [ "Datatype", "Schema", "string" ]
        }
      ],
      doc: If `type` is `map`, defines the value type for the key/value pairs.
    }
  ]

- type: record
  name: "SchemaDef"
  extends: "Schema"
  fields: [ { name: name, type: "string" } ]

- type: record
  name: "InputSchema"
  extends: "Schema"
  "specialize": {"Schema": "InputSchema"}
  fields: [ {
    name: "connect",
    type: [
      "null",
      "DataLink",
      {
        type: "array",
        items: "DataLink"
      }
    ]
  } ]

- type: record
  name: "InputSchemaRoot"
  extends: "InputSchema"
  fields: [ { name: "id", type: "string" } ]

- type: record
  name: "CommandLineInputSchema"
  extends: "InputSchema"
  "specialize": {"InputSchema": "CommandLineInputSchema"}
  fields: [
    {
      name: "commandLineBinding",
      type: [ "null", "CommandLineBinding" ]
    }
  ]

- type: record
  name: "CommandLineInputSchemaRoot"
  extends: "CommandLineInputSchema"
  fields: [ { name: "id", type: "string" } ]

- type: record
  name: "OutputSchema"
  extends: "Schema"
  "specialize": {"Schema": "OutputSchema"}
  fields: [
    {
      name: "outputBinding",
      type: [ "null", "OutputBinding" ]
    }
  ]

- type: record
  name: "OutputSchemaRoot"
  extends: "OutputSchema"
  fields: [ { name: "id", type: "string" } ]

- type: record
  name: "ProcessRequirement"
  fields: [
    { name: "class", type: "string" }
  ]

- type: record
  name: "FileDef"
  fields: [
    {name: "filename", type: "string"},
    {
      name: "value",
      type: ["null", "string", "Expression"]
    }
  ]

- type: record
  name: "EnvironmentDef"
  fields: [
    {name: "env", type: "string"},
    {
      name: "value",
      type: ["null", "string", "Expression"]
    }
  ]

- type: record
  name: "Process"
  doc: |

    To execute a CWL document means to execute the `Process` object defined by
    the document.  Note that the `Process` object is abstract and cannot be
    directly executed.  If the `class` field is not specified, the
    implementation must default to the process class [`External`](\#/schema/External).

  fields:
    - name: "class"
      type: "string"
      "doc": |
        The type of process is defined by the `class` field.  Valid values for this
        field are [`CommandLineTool`](\#/schema/CommandLineTool),
        [`ExpressionTool`](\#/schema/ExpressionTool), [`Workflow`](\#/schema/Workflow) or
        [`External`](\#/schema/External).  If the `class` field is not
        specified, the implementation must default to the process class [`External`](\#/schema/External).
    - name: "inputs"
      type: {
        type: "array",
        items: "InputSchemaRoot",
      }
      doc:
        "Defines the input parameters of the process.  This may be used to
        validate the input object or build a user interface for constructing
        the input object."
    - name: "outputs"
      type: {
        type: "array",
        items: "OutputSchemaRoot"
      }
      doc: "Defines the input parameters of the process, and
        may be used to generate and/or validate the input object."
    - name: "schemaDefs"
      type: [
        "null",
        {
          type: "array",
          items: "SchemaDef"
        }
      ]
      "doc": |
        Process objects may include the `schemaDefs` field.  This field consists of an
        array of type definitions which must be used when interpreting the `inputs` and
        `outputs` fields.  When a symbolic type is encountered that is not in
        [`Datatype`](#/schema/Datatype), the implementation must check if
        the type is defined in `schemaDefs` and use that definition.  If the type is not
        found in `schemaDefs`, it is an error.  The entries in `schemaDefs` must be
        processed in the order listed such that later schema definitions may refer to
        earlier schema definitions.
    - name: "requirements"
      type: [
        "null",
        {
          type: "array",
          items: "ProcessRequirement"
        }
      ]
      doc: >
        Declares requirements applying to either the runtime environment or the
        workflow engine that must be met in order to execute this process.  If
        an implementation cannot satisfy all requirements, or a requirement is
        listed which is not recognized by the implementation, it is a fatal
        error and the implementation must not attempt to run the process,
        unless overridden at user option.
    - name: "hints"
      type: [
        "null",
        {
          type: "array",
          items: "ProcessRequirement"
        }
      ]
      doc: >
        Declares hints applying to either the runtime environment or the
        workflow engine that may be helpful in executing this process.  It is
        not an error if an implementation cannot satisfy all hints, however
        the implementation may report a warning.
    - name: "expressionDefs"
      type: [
        "null",
        {
          type: "array",
          items: ["string", "Ref"]
        }
      ]

- type: record
  name: "CommandLineTool"
  extends: "Process"
  specialize: {"InputSchemaRoot": "CommandLineInputSchemaRoot"}
  doc: |
    ## Command line binding

    ## Output binding

    ## Executing tools in Docker

  fields: [
    {
      name: "baseCommand",
      type: [
        "string",
        {
          type: "array",
            items: "string"
        }
        ]
      },
      {
        name: "arguments",
        type: [
          "null",
          {
            type: "array",
            items: ["string", "CommandLineBinding"]
          }
        ]
      },
      {
        name: "stdin",
        type: ["null", "Expression", "Ref"]
      },
      {
        name: "stdout",
        type: ["null", "string", "Expression", "Ref"]
      },
      {
        name: "fileDefs",
        type: [
          "null",
          {
            type: "array",
            items: "FileDef"
          }
        ]
      },
      {
        name: "environmentDefs",
        type: [
          "null",
          {
            type: "array",
            items: "EnvironmentDef"
          }
        ]
      }
    ]


- type: record
  name: "ExpressionTool"
  extends: "Process"
  fields: [
    {
      name: "script",
      type: "Expression"
    }
  ]

- type: record
  name: "External"
  extends: "Process"
  "specialize":
    "InputSchemaRoot": "ExternallyDefinedInput"
    "OutputSchemaRoot": "ExternallyDefinedOutput"
  fields: [
    {
      name: "impl",
      type: "string",
      doc:  Specifies the resource that should be loaded to find the actual process definition.
    }
  ]
  doc: "An external process provides a level of indirection to instantiate a process
  defined by an external resource (another CWL document)."


- type: record
  name: "Workflow"
  extends: "Process"
  fields: [
    {
      name: "steps",
      type: {
        type: "array",
        items: ["Workflow", "CommandLineTool", "ExpressionTool", "External"]
      }
    }
  ]
