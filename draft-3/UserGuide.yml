- name: userguide
  type: documentation
  doc:
    - $include: userguide-intro.md

    - |
      ## First example

      The simplest "hello world" program.  This accepts one input parameter,
      writes a message to the terminal or job log, and produces no permanent
      output.

      *example-1st.cwl*
      ```
    - $include: draft-3/example-1st.cwl
    - |
      ```

      Use a JSON object in a separate file to describe the input of a run:

      *example-echo-job.json*
      ```
    - $include: draft-3/example-echo-job.json
    - |
      ```

      Now invoke `cwl-runner` with the tool wrapper and the input object on the
      command line:

      ```
      $ cwl-runner example-echo.cwl example-echo-job.json
      [job 140199012414352] $ echo 'Hello world!'
      Hello world!
      Final process status is success
      ```

      What's going on here?  Let's break it down:

      ```
      class: CommandLineTool
      ```

      The first line indicates this document describes a command line tool.

      ```
      baseCommand: echo
      ```

      The `baseCommand` provides the name of program that will actually run
      (echo)

      ```
      inputs:
        - id: message
          type: string
          inputBinding:
            position: 1
      ```

      This section describes the inputs of the tool.  This is a list of input
      parameters and each parameter includes an identifier, a data type, and
      optionally an `inputBinding` which describes how this input parameter
      should appear on the command line.  In this example, the `position` field
      indicates where it should appear on the command line.

      ```
      outputs: []
      ```

      This tool has no outputs, so the output section is an empty list.

    - |
      ## Input parameters

      Input parameters have an `id` and `type`.  The `id` is the name of the
      parameter, and `type` describes what types of values are valid for that
      parameter.

      Valid primitive types are *string*, *int*, *long*, *float*, *double*, and
      *null*; complex types are *array* and *record*; in addition there are
      special types *File* and *Any*.

      The field `inputBinding` is optional and indicates whether and how the
      input parameter should be appear on the tool's command line.  The
      following example demonstrates some input parameters with different types
      and input bindings:

      *example-inp.cwl*
      ```
    - $include: draft-3/example-inp.cwl
    - |
      ```

      *example-inp-job.json*
      ```
    - $include: draft-3/example-inp-job.json
    - |
      ```

      Invoke `cwl-runner` with the tool wrapper and the input object on the
      command line:

      ```
      $ cwl-runner example-inp.cwl example-inp-job.json
      [job 140020149614160] /home/peter/work/common-workflow-language/draft-3$ echo -f -i42 --example-string hello --file=/home/peter/work/common-workflow-language/draft-3/draft-3/whale.txt
      -f -i42 --example-string hello --file=/home/peter/work/common-workflow-language/draft-3/draft-3/whale.txt
      Final process status is success
      ```

      Some fields in inputBinding are `prefix`, `separate`, and `position`.

      The `prefix` field

      The `position` controls where the parameter appears on the command line.
      Parameter positions are relative, not abosolute, which means:

        * positions do not have to be sequential, three parameters with
          positions [1, 3, 5] will result in the same command line as [1, 2,
          3].
        * positions can be negative
        * more than one parameter can have the same position (ties are broken
          using the parameter name)
        * the position field itself is optional.  the default position is 0.

      The `baseCommand` field always comes before parameters.


    - |
      ## Capturing output files

      Like input parameters, output parameters consist of the parameter `id`
      and the parameter `type`.  The most common output type is `File`.

      The field `outputBinding` describes how to capture the output of the tool
      to create the output object.  The most common field in outputBinding is
      `glob`, which takes a file name or file pattern that you want to capture.

      ```
      - $include: draft-3/example-tar2.cwl
    - |
      ```

      ```
      - $include: draft-3/example-tar-job.json
    - |
      ```

      ```
      $ cwl-runner example-tar.cwl example-tar-job.json
      [job 139868145165200] $ tar xvf hello.tar
      hello.txt
      Final process status is success
      {
      "example_out": {
        "path": "hello.txt",
        "size": 13,
        "class": "File",
        "checksum": "sha1$47a013e660d408619d894b20806b1d5086aab03b"
        }
      }
      ```

    - |
      ## Capturing a tool's standard output stream

      To capture a tool's standard output stream, add the `stdout` field to the
      tool description with the name of the file to redirect the output.  Then,
      add an output parameter with a `glob` that matches the file with the
      standard output contents.

      *example-stdout.cwl*
      ```
    - $include: draft-3/example-stdout.cwl
    - |
      ```

      Now invoke `cwl-runner` providing the tool wrapper and the input object
      on the command line:

      ```
      $ cwl-runner example-stdout.cwl example-echo-job.json
      [job 140199012414352] $ echo 'Hello world!' > output.txt
      Final process status is success
      {
      "output": {
        "path": "output.txt",
        "size": 13,
        "class": "File",
        "checksum": "sha1$47a013e660d408619d894b20806b1d5086aab03b"
        }
      }
      $ cat output.txt
      Hello world!
      ```
